stages:
  - build
  - deploy

build-rhodry-kafka:
  stage: build
  tags:
    - biapi
  rules:
    - changes:
      - rhodry-kafka/*
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - source .env
    - cd rhodry-kafka
    - docker build -t ${CI_REGISTRY_IMAGE}/kafka:${CONFLUENT_VERSION} --build-arg CONFLUENT_VERSION=${CONFLUENT_VERSION} .
    - docker push ${CI_REGISTRY_IMAGE}/kafka:${CONFLUENT_VERSION}

build-rhodry-connect:
  stage: build
  tags:
    - biapi
  rules:
    - changes:
      - rhodry-connect/*
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd rhodry-connect
    - source .env
    - |
        docker build -t ${CI_REGISTRY_IMAGE}/connect:${VERSION} \
          --build-arg RHODRY_CONNECT_VERSION=${VERSION} \
          --build-arg CONFLUENT_VERSION=${CONFLUENT_VERSION} \
          --build-arg DEBEZIUM_VERSION=${DEBEZIUM_VERSION} \
          --build-arg JDBC_CONNECTOR_VERSION=${JDBC_CONNECTOR_VERSION} \
          --build-arg JSON_SCHEMA_CONVERTER_VERSION=${JSON_SCHEMA_CONVERTER_VERSION} \
          --build-arg ELASTICSEARCH_SOURCE_CONNECTOR_VERSION=${ELASTICSEARCH_SOURCE_CONNECTOR_VERSION} .
    - docker push ${CI_REGISTRY_IMAGE}/connect:${VERSION}

build-rhodry-connect-legacy:
  stage: build
  tags:
    - biapi
  rules:
    - changes:
      - rhodry-connect-legacy/*
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd rhodry-connect-legacy
    - source .env
    - |
        docker build -t ${CI_REGISTRY_IMAGE}/connect:${VERSION} \
          --build-arg RHODRY_CONNECT_VERSION=${VERSION} \
          --build-arg CONFLUENT_VERSION=${CONFLUENT_VERSION} \
          --build-arg DEBEZIUM_VERSION=${DEBEZIUM_VERSION} \
          --build-arg KAFKA_VERSION=${KAFKA_VERSION} \
          --build-arg JDBC_CONNECTOR_VERSION=${JDBC_CONNECTOR_VERSION} \
          --build-arg JSON_SCHEMA_CONVERTER_VERSION=${JSON_SCHEMA_CONVERTER_VERSION} \
          --build-arg ELASTICSEARCH_SOURCE_CONNECTOR_VERSION=${ELASTICSEARCH_SOURCE_CONNECTOR_VERSION} .
    - docker push ${CI_REGISTRY_IMAGE}/connect:${VERSION}

build-rhodry-rest:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "lab"
      changes:
        - rhodry/*
  tags:
    - rhodrylab
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd rhodry
    - source .env
    - docker build -t ${CI_REGISTRY_IMAGE}:${VERSION} --build-arg DGPY_VERSION=${DGPY_VERSION} .
    - docker tag ${CI_REGISTRY_IMAGE}:${VERSION} ${CI_REGISTRY_IMAGE}
    - docker push ${CI_REGISTRY_IMAGE}:${VERSION}
    - docker push ${CI_REGISTRY_IMAGE}

deploy-testdbs:
  stage: deploy
  tags:
    - rhodrylab
  rules:
    - if: $CI_COMMIT_BRANCH == "lab"
      changes:
        - lab/dbs/*
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd lab/dbs
    - source ../../compose_envs.sh
    - docker stack deploy -c docker-compose.prod.yml --with-registry-auth lab

deploy-rhodry:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "lab"
      changes:
        - docker-compose.yml
        - rhodry-connect/*
        - rhodry/*
        - docker-compose.zkprod.yml
  tags:
    - rhodrylab
  before_script:
    - docker network create --driver overlay --scope swarm --attachable ${CI_PROJECT_NAME} || echo "network already exists. skipping."
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - source .env
    - mv -f docker-compose.zkprod.yml docker-compose.yml
    - source compose_envs.sh
    - docker stack deploy -c docker-compose.prod.yml --with-registry-auth ${CI_PROJECT_NAME}

deploy-dglab:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "lab"
  tags:
    - rhodrylab
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd lab/dglab
    - source ../../compose_envs.sh ../dbs/.env
    - docker stack deploy -c docker-compose.prod.yml --with-registry-auth lab

# deploy-trino:
#   stage: deploy
#   rules:
#     - if: $CI_COMMIT_BRANCH == "lab"
#       changes:
#         - lab/trino/*
#   tags:
#     - rhodrylab
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - cd lab/trino
#     - source ../../compose_envs.sh
#     - docker stack deploy -c docker-compose.prod.yml --with-registry-auth lab

# deploy-rhodry-rest:
#   stage: deploy
#   rules:
#     - if: $CI_COMMIT_BRANCH == "lab"
#       changes:
#         - rhodry/*
#   tags:
#     - rhodrylab
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - cd rhodry
#     - source ../compose_envs.sh
#     - docker stack deploy -c docker-compose.prod.yml --with-registry-auth rhodry
