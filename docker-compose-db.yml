version: "3.9"

networks:
  platform:
    external: true

x-network: &network
  networks:
    - platform

x-healthcheck-config: &healthcheck-config
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-deploy-on-front: &deploy-on-front
  deploy:
    replicas: 1
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}

x-deploy-on-host-01: &deploy-on-host-01
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}
x-deploy-on-host-02: &deploy-on-host-02
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_02}
x-deploy-on-host-03: &deploy-on-host-03
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_03}
        
##################################################################

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql.conf"] # to avoid overlap with postgresql.conf file bug error
    secrets:
      - postgres_password
    user: postgres
    <<: *deploy-on-front
    <<: *network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost", "-p", "5432"]
      <<: *healthcheck-config

  elasticsearch:
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      ES_JAVA_OPTS: "-Xms4g -Xmx4g"
      discovery.type: single-node
      cluster.name: nevyn
      network.host: 0.0.0.0
      xpack.license.self_generated.type: basic
      xpack.security.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    secrets:
      - elasticsearch_password
    entrypoint: |
      sh -c "
      export ELASTIC_PASSWORD=$$(cat /run/secrets/elasticsearch_password) &&
      /bin/tini -- /usr/local/bin/docker-entrypoint.sh eswrapper
      "
    <<: *deploy-on-front
    <<: *network

secrets:
  postgres_password:
    external: true
  elasticsearch_password:
    external: true

volumes:
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
