version: "3.9"

networks:
  platform:
    external: true

x-network: &network
  networks:
    - platform

x-healthcheck-config: &healthcheck-config
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-deploy-on-front: &deploy-on-front
  deploy:
    replicas: 1
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}

x-deploy-on-host-01: &deploy-on-host-01
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}
x-deploy-on-host-02: &deploy-on-host-02
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_02}
x-deploy-on-host-03: &deploy-on-host-03
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_03}
        
##################################################################

services:

  influxdb:
    image: ${INFLUXDB_IMAGE}
    ports:
      - ${INFLUXDB_PORT}:8086
    volumes:
       - influxdb-data:/var/lib/influxdb2
    environment: # https://docs.influxdata.com/influxdb/v2/reference/config-options/#configuration-options
      # dont use this on production instead use UI and save pass and token in secrets
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: influxdb
      DOCKER_INFLUXDB_INIT_PASSWORD_FILE: /run/secrets/influxdb_password
      DOCKER_INFLUXDB_INIT_ORG: DataPlatform
      DOCKER_INFLUXDB_INIT_BUCKET: default
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE: /run/secrets/influxdb_admin_token
      DOCKER_INFLUXDB_INIT_RETENTION: 730d
      INFLUXDB_REPORTING_DISABLED: "true"
      # INFLUXD_LOG_LEVEL: debug
      # INFLUXDB_DATA_WAL_FSYNC_DELAY: 0s # time that a write will wait before fsyncing, useful for batching up multiple fsync calls and for slower disks
      # INFLUXDB_DATA_INDEX_VERSION: tsi1 # The type of shard index. default: in-memory, "tsi1": disk based for higher cardinality datasets
    secrets:
      - influxdb_password
      - influxdb_admin_token
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: ["CMD", "influx", "ping"]
      <<: *healthcheck-config

  chronograf:
    image: ${CHRONOGRAF_IMAGE}
    ports:
      - ${CHRONOGRAF_PORT}:8888
    volumes:
      - chronograf-data:/var/lib/chronograf
    environment:
      REPORTING_DISABLED: "true"
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: wget --spider localhost:8888 || exit 1
      <<: *healthcheck-config

  kapacitor:
    image: ${KAPACITOR_IMAGE}
    ports:
      - ${KAPACITOR_PORT}:9092
    volumes: 
      - kapacitor-data:/var/lib/kapacitor
    environment:
      KAPACITOR_REPORTING_ENABLED: "false"
    configs:
      - source: kapacitor-config
        target: /etc/kapacitor/kapacitor.conf
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: wget --spider localhost:9092/kapacitor/v1/ping || exit 1
      <<: *healthcheck-config

  telegraf:
    image: ${TELEGRAF_IMAGE}
    configs:
      - source: telegraf-config
        target: /etc/telegraf/telegraf.conf
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: ["CMD", "pgrep", "-f", "telegraf || exit 1"]
      <<: *healthcheck-config

secrets:
  influxdb_password:
    external: true
  influxdb_admin_token:
    external: true

volumes:
  influxdb-data:
  chronograf-data:
  kapacitor-data:

configs:
  telegraf-config:
    file: ./config/telegraf.conf
  kapacitor-config:
    file: ./config/kapacitor.conf
