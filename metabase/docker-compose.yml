version: "3.9"

networks:
  platform:
    external: true

x-network: &network
  networks:
    - platform

x-healthcheck-config: &healthcheck-config
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

x-deploy-on-front: &deploy-on-front
  deploy:
    replicas: 1
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}

x-deploy-on-host-01: &deploy-on-host-01
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_01}
x-deploy-on-host-02: &deploy-on-host-02
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_02}
x-deploy-on-host-03: &deploy-on-host-03
  deploy:
    placement:
      constraints:
        - node.hostname == ${HOSTNAME_03}
        
##################################################################

services:

  metabase:
    image: ${METABASE_IMAGE}
    ports:
      - ${METABASE_PORT}:3000
    environment:
      JAVA_TIMEZONE: Asia/Tehran
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5433
      MB_DB_USER: postgres
      MB_DB_PASS: postgres
      MB_DB_HOST: postgres
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      <<: *healthcheck-config

  postgres:
    image: ${POSTGRES_IMAGE}
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: metabase
    volumes:
      - postgres-data:/var/lib/postgresql/data
    user: postgres
    <<: [*network, *deploy-on-front]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost", "-p", "5432"]
      <<: *healthcheck-config
  
volumes:
  postgres-data:
